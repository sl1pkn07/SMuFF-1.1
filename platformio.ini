; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
[platformio]
#default_envs =  BIGTREE_SKR_MINI, SMUFF_ESP32, BIGTREE_SKR_13
default_envs = NUCLEO_F103RB

[common]
lib_deps =
    # SD-Card file system library
    SdFs
    # JSON library for the configuration file
    ArduinoJson@6
    # LC-Display library
    U8G2
    # Rotary-Encoder library    
    #https://github.com/Den-W/encoder.git
    #Free memory library
    https://github.com/McNeight/MemoryFree
build_flags = -D SMUFF_V5
build_unflags = -W unused-variable 

#
# Please note: From version 2.x on the 8-bit ATMega is 
# no longer supported and may fail to compile.
#
# WANHAO I3-Mini
#
[env:WANHAO_I3_MINI]
platform        = atmelavr
framework       = arduino
board           = megaatmega2560
build_flags     = -D __BRD_I3_MINI
                  -D __AVR__
                  -I include/Wanhao_i3_mini 
build_unflags   = $(common.build_unflags)
lib_deps        = ${common.lib_deps}
upload_port     = COM[35]
monitor_speed   = 57600

#
# SMUFF ESP32
#
# This is a specific controller board built for the SMuFF
# based on a ESP32 microcontroller.
#
# For more information about it visit: https://{_smuff_esp32_controller_board_website_}.com
#
[env:SMUFF_ESP32]
platform        = espressif32
framework       = arduino
board           = esp32doit-devkit-v1
build_flags     = -D __BRD_ESP32
                  -D __ESP32__
                  -D __xDEBUG_BT__
                  -D USE_TWI_DISPLAY
                  -D LOG_LOCAL_LEVEL=ESP_LOG_DEBUG
                  -I include/ESP32 
lib_deps        = https://github.com/lbernstone/Tone.git
                  ${common.lib_deps}
upload_port = COM[3]
monitor_speed = 115200
board_build.partitions = custompart.csv


#
# BIGTREETECH SKR MINI V1.1
#
[env:BIGTREE_SKR_MINI]
platform        = ststm32
framework       = arduino
board           = genericSTM32F103RC
board_build.core= maple
build_flags     = ${common.build_flags} 
                  -std=gnu++14 
                  -g 
                  -I include/SKR_mini 
                  -D __BRD_SKR_MINI
                  -D __STM32F1__
                  -D USE_TWI_DISPLAY
                  -D PIO_FRAMEWORK_ARDUINO_ENABLE_CDC
                  -D USBCON
	              -D USBD_VID=0x1EAF
	              -D USB_MANUFACTURER="LeafLabs"
	              -D USB_PRODUCT="\"MAPLE R3\""
	              -D HAL_PCD_MODULE_ENABLED
build_unflags   = -std=gnu++11 $(common.build_unflags)
lib_deps        = ${common.lib_deps} 
monitor_speed   = 115200
upload_protocol = stlink
debug_tool      = stlink

# !!! DO NOT USE - EXPERIMENTAL !!!
# Will fail to compile because of the lacking
# Arduino framework for this MCU.
#
# BIGTREETECH SKR 1.3 
#
[env:BIGTREE_SKR_13]
platform        = https://github.com/p3p/pio-nxplpc-arduino-lpc176x/archive/master.zip
framework       = arduino
board           = nxp_lpc1768
build_flags     = ${common.build_flags} 
                  -g 
                  -I include/SKR_13
                  -D __BRD_SKR_13
                  -D __NXP__
                  -D USE_TWI_DISPLAY
build_unflags   = $(common.build_unflags)
lib_ldf_mode    = off
lib_compat_mode = strict
lib_deps        = https://github.com/p3p/pio-framework-arduino-lpc176x.git
                  ${common.lib_deps} 
monitor_speed   = 250000
upload_port     = COM1

#
# NUCLEO_F103RB + CNC shield
#
[env:NUCLEO_F103RB]
platform        = ststm32
framework       = arduino
board           = genericSTM32F103RB
build_flags     = ${common.build_flags}
                  -g
                  -I include/NUCLEO_F103RB
                  -D __BRD_NUCLEO_F103RB
                  -D __STM32F1__
                  -D USE_TWI_DISPLAY
build_unflags   = -std=gnu++11 $(common.build_unflags)
lib_deps        = ${common.lib_deps}
monitor_speed   = 230400
upload_protocol = stlink
debug_tool      = stlink
