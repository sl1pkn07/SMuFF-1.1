; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
[platformio]
default_envs = FYSETC_AIOII

#
# TODO: Pick a display type here by removing / setting
#       the comment char (#) accordingly
#
# WARNING: If you pick the ANET display, make sure you've checked
#          the wiring before attaching the display to the board!
#          Instructions to modify the ANET display can be found
#          here: https://www.thingiverse.com/thing:4009810
[display]
build_flags = #-D USE_TWI_DISPLAY
              #-D USE_LEONERD_DISPLAY
              #-D USE_ANET_DISPLAY
              #-D USE_MINI12864_PANEL_V21 -D USE_FASTLED_BACKLIGHT
              #-D USE_MINI12864_PANEL_V20 -D USE_RGB_BACKLIGHT
              #-D USE_CREALITY_DISPLAY

              # use either one of the backlight options or none, if your
              # display doesn't support this feature
              #-D USE_FASTLED_BACKLIGHT
              #-D USE_RGB_BACKLIGHT

#
# STM32 common build flags for USB port usage
#
[USB]
build_flags =   -D ENABLE_USB_SERIAL
                -D SERIAL_USB
                -D USBD_USE_CDC
                -D USBCON
                # not sure about the next two
                -D PIO_FRAMEWORK_ARDUINO_ENABLE_CDC
                -D HAL_PCD_MODULE_ENABLED
#
# include these if you're going to use TMC stepper drivers
# and set the definitions accordingly
#
[TMC]
lib_deps        = # both libraries being used for TMC stepper drivers
                https://github.com/teemuatlut/TMCStepper
                https://github.com/FYSETC/SoftwareSerialM
build_flags =   -D TMC_SW_BAUDRATE=19200
                -D TMC_HW_BAUDRATE=115200

[Multiservo]
lib_deps =  # include this if you're compiling for multiservo
            adafruit/Adafruit PWM Servo Driver Library @ ~2.4.0
build_flags =   -D MULTISERVO


[common]
#build_type  =   debug
build_flags =   -D SMUFF_V5
                -D DEBUG
                -D __HW_DEBUG__
                # use the next two options only if you're compiling for Marlin MMU2
                -D MARLIN2_ONLY
                -D SOFTRESET
                # some compiler options to get rid of not really critical messages while compiling
                -Wno-unused-variable
                -Wno-format-extra-args
                -Wno-misleading-indentation
                # U8G2 library wrappers
                -Wl,--wrap=u8g2_UserInterfaceSelectionList
                -Wl,--wrap=u8x8_byte_arduino_2nd_hw_spi
                -std=gnu++14
                -Os
                # generate debug information
                # use -g for default, -g1 for minimal, -g3 for maximal debug information or
                # -g0 for turning debug information off
                -g0
build_unflags = -std=gnu++11
lib_deps =  # SD-Card file system library
            SdFs
            # JSON library for the configuration file
            ArduinoJson@6
            # LC-Display library
            U8G2
            #Free memory library
            https://github.com/McNeight/MemoryFree
            # FastLED library - use fork FastLED-STM32 instead of original one
            # because of the compile time circular reference issues
            #FastLED@>=3.3.3
            https://github.com/13rac1/FastLED-STM32
            https://github.com/technik-gegg/LeoNerd-OLED-Module-Library.git

#
# Please note: From version 2.x the 8-bit ATMega is
# no longer supported and may fail to compile.
#
# WANHAO I3-Mini
#
[env:WANHAO_I3_MINI]
platform        = atmelavr
framework       = arduino
board           = megaatmega2560
lib_deps        = ${common.lib_deps}
build_flags     = -D __BRD_I3_MINI
                  -D __AVR__
                  -I include/Wanhao_i3_mini
build_unflags   = ${common.build_unflags}
upload_port     = COM[35]
monitor_speed   = 57600

#
# SMUFF ESP32
#
# This is a specific controller board built for the SMuFF
# based on a ESP32 microcontroller.
#
# For more information about it visit: https://sites.google.com/view/the-smuff/ESP32-Board
#
[env:SMUFF_ESP32]
platform        = espressif32
framework       = arduino
board           = esp32doit-devkit-v1
lib_deps        = https://github.com/lbernstone/Tone.git
                  ${common.lib_deps}
build_flags     = ${display.build_flags}
                  -D __BRD_ESP32
                  -D __ESP32__
                  #-D __DEBUG_BT__
                  -D LOG_LOCAL_LEVEL=ESP_LOG_DEBUG
                  -I include/ESP32
upload_port     = COM[3]
monitor_speed   = 115200
board_build.partitions = custompart.csv


#
# BIGTREETECH SKR MINI V1.1
#
# IT'S NOT RECOMMENDED USING THIS ENV ANYMORE SINCE
# IT WILL OVERWRITE THE FACTORY BOOTLOADER.
# PLEASE USE BIGTREE_SKR_MINI_SD INSTEAD AND FLASH
# THE FIRMWARE FROM SD-CARD!
#
#[env:BIGTREE_SKR_MINI]
#platform        = ststm32
#framework       = arduino
#board           = genericSTM32F103RC
#board_build.core= maple
#lib_deps        = ${common.lib_deps}
#build_flags     = ${common.build_flags}
#                  ${display.build_flags}
#                  ${USB.build_flags}
#                  -I include/SKR_mini
#                  -D __BRD_SKR_MINI
#                  -D __STM32F1__
#build_unflags   = ${common.build_unflags}
#monitor_speed   = 115200
#upload_protocol = stlink
#upload_protocol = dfu
#debug_tool      = stlink

#
# BIGTREETECH SKR MINI V1.1 (flashing through SD-Card, using the default bootloader)
#
[env:BIGTREE_SKR_MINI_SD]
platform             = ststm32
framework            = arduino
board                = genericSTM32F103RC
board_build.core     = maple
lib_deps             = ${common.lib_deps}
                       ${TMC.lib_deps}
build_flags          = ${common.build_flags}
                       ${display.build_flags}
                       ${USB.build_flags}
                       ${TMC.build_flags}
                       -I include/SKR_mini
                       -D __BRD_SKR_MINI
                       -D __STM32F1__
build_unflags        = ${common.build_unflags}
extra_scripts        = include/SKR_mini/STM32F103RC_SKR_MINI.py
board_build.ldscript = include/SKR_mini/STM32F103RC_SKR_MINI_256K.ld

#
# BIGTREETECH SKR MINI E3 V1.2 (flashing through SD-Card, using the default bootloader)
#
[env:BIGTREE_SKR_MINI_E3_SD]
platform             = ststm32
framework            = arduino
board                = genericSTM32F103RC
board_build.core     = maple
lib_deps             = ${common.lib_deps}
                       ${TMC.lib_deps}
build_flags          = ${common.build_flags}
                       ${display.build_flags}
                       ${USB.build_flags}
                       ${TMC.build_flags}
                       -I include/SKR_mini_E3
                       -D __BRD_SKR_MINI_E3
                       -D __STM32F1__
build_unflags        = ${common.build_unflags}
extra_scripts        = include/SKR_mini_E3/STM32F103RC_SKR_MINI.py
board_build.ldscript = include/SKR_mini_E3/STM32F103RC_SKR_MINI_256K.ld

#
# BIGTREETECH SKR MINI E3-DIP V1.1 (flashing through SD-Card, using the default bootloader)
#
[env:BIGTREE_SKR_MINI_E3DIP_SD]
platform             = ststm32
framework            = arduino
board                = genericSTM32F103RC
board_build.core     = maple
lib_deps             = ${common.lib_deps}
                       ${TMC.lib_deps}
                       #${Multiservo.lib_deps}
build_flags          = ${common.build_flags}
                       ${display.build_flags}
                       ${USB.build_flags}
                       ${TMC.build_flags}
                       #${Multiservo.build_flags}
                       -I include/SKR_mini_E3DIP
                       -D __BRD_SKR_MINI_E3DIP
                       -D __STM32F1__
build_unflags        = ${common.build_unflags}
extra_scripts        = include/SKR_mini_E3DIP/STM32F103RC_SKR_MINI.py
board_build.ldscript = include/SKR_mini_E3DIP/STM32F103RC_SKR_MINI_256K.ld

# UNTESTED YET!
#
# BIGTREETECH SKR MINI E3 V2.0 (flashing through SD-Card, using the default bootloader)
#
[env:BIGTREE_SKR_MINI_E3_SD_20]
platform             = ststm32
framework            = arduino
board                = genericSTM32F103RC
board_build.core     = maple
lib_deps             = ${common.lib_deps}
                       ${TMC.lib_deps}
build_flags          = ${common.build_flags}
                       ${display.build_flags}
                       ${USB.build_flags}
                       ${TMC.build_flags}
                       -I include/SKR_mini_E3-2.0
                       -D __BRD_SKR_MINI_E3
                       -D __STM32F1__
build_unflags        = ${common.build_unflags}
extra_scripts        = include/SKR_mini_E3-2.0/STM32F103RC_SKR_MINI.py
board_build.ldscript = include/SKR_mini_E3-2.0/STM32F103RC_SKR_MINI_256K.ld


# !!! DO NOT USE - EXPERIMENTAL !!!
# Will fail to compile because of the lacking
# Arduino framework for this MCU.
#
# BIGTREETECH SKR 1.3
#
[env:BIGTREE_SKR_13]
platform        = https://github.com/p3p/pio-nxplpc-arduino-lpc176x/archive/0.1.3.zip
framework       = arduino
board           = nxp_lpc1768
lib_deps        = https://github.com/p3p/pio-framework-arduino-lpc176x.git
                  ${common.lib_deps}
build_flags     = ${common.build_flags}
                  ${display.build_flags}
                  -I include/SKR_13
                  -D __BRD_SKR_13
                  -D __NXP__
build_unflags   = ${common.build_unflags}
lib_ldf_mode    = off
lib_compat_mode = strict
monitor_speed   = 250000
upload_port     = COM1

#
# FYSETC AIO II v3.2 (flashing through SDcard, using FYSECT STM32F103 bootloader)
# https://github.com/FYSETC/Bootloader-STM32F103
#
[env:FYSETC_AIOII_SD]
platform         = ststm32
framework        = arduino
board            = genericSTM32F103RC
board_build.core = maple
lib_deps         = ${common.lib_deps}
                   ${TMC.lib_deps}
build_flags      = ${common.build_flags}
                   ${USB.build_flags}
                   ${TMC.build_flags}
                   -I include/FYSETC_AIOII
                   -D __BRD_FYSETC_AIOII
                   -D __STM32F1__
                   -D USE_MINI12864_PANEL_V21
                   -D USE_RGB_BACKLIGHT
build_unflags    = ${common.build_unflags}
extra_scripts    = include/FYSETC_AIOII/FYSETC_AIOII_SD.py

[env:FYSETC_AIOII]
platform         = ststm32
framework        = arduino
board            = genericSTM32F103RC
board_build.core = maple
lib_deps         =
                   ${common.lib_deps}
                   ${TMC.lib_deps}
build_flags      =
                   ${common.build_flags}
                   ${display.build_flags}
                   ${USB.build_flags}
                   ${TMC.build_flags}
                   -I include/FYSETC_AIOII
                   -D __BRD_FYSETC_AIOII
                   -D __STM32F1__
                   -D USE_MINI12864_PANEL_V21
                   -D USE_RGB_BACKLIGHT
build_unflags    = ${common.build_unflags}
extra_scripts    = include/FYSETC_AIOII/FYSETC_AIOII.py
debug_tool       = stlink
upload_protocol  = serial
